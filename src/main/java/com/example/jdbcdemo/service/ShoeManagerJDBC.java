package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Person;
import com.example.jdbcdemo.domain.Shoe;

public class ShoeManagerJDBC implements ShoeManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	private String createTableShoe = "CREATE TABLE Shoe(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(20), size INT, price double)";
	
	private PreparedStatement addShoeStmt;
	private PreparedStatement deleteAllShoesStmt;
	private PreparedStatement getAllShoesStmt;
	private PreparedStatement updateShoeStmt; 

	private Statement statement;
	
	public ShoeManagerJDBC() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Shoe".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}
			
			if (!tableExists)
				statement.executeUpdate(createTableShoe);

			addShoeStmt = connection
					.prepareStatement("INSERT INTO Shoe (name, size, price) VALUES (?,?,?)");
			deleteAllShoesStmt = connection
					.prepareStatement("DELETE FROM Shoe");
			updateShoeStmt = connection
					.prepareStatement("UPDATE FROM Shoe SET");
			getAllShoesStmt = connection
					.prepareStatement("SELECT id, name, size, price FROM Shoe");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	Connection getConnection() {
		return connection;
	}

	void clearShoes() {
		try {
			deleteAllShoesStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	//@Override
	public int addShoe(Shoe shoe) {
		int count = 0;
		try {
			addShoeStmt.setString(1, shoe.getName());
			addShoeStmt.setInt(2, shoe.getSize());
			addShoeStmt.setDouble(3, shoe.getPrice());

			count = addShoeStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	public List<Shoe> getAllShoes() {
		List<Shoe> shoes = new ArrayList<Shoe>();

		try {
			ResultSet rs = getAllShoesStmt.executeQuery();

			while (rs.next()) {
				Shoe s = new Shoe();
				s.setID(rs.getLong("id"));
				s.setName(rs.getString("name"));
				s.setSize(rs.getInt("size"));
				s.setPrice(rs.getDouble("price"));
				shoes.add(s);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return shoes;
	}

	@Override
	public int update(Shoe shoe) {
		// TODO Auto-generated method stub
		return 0;
	}

	

}
